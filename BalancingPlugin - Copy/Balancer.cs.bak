using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DrivePool.Integration.Extensions;

namespace AllInOnePlugin
{
    /// <summary>
    /// This class is the "Controller" and it builds our balancing model.
    /// </summary>
    public class Balancer
        : DrivePool.Integration.Balancing.BalancerBase
    {
        /// <summary>
        /// Each balancer must have a unique Guid.
        /// </summary>
        public override Guid Id
        {
            get 
            {
                return new Guid("a2070e10-80f0-4eaf-b97b-56f4eab6a8f1");
            }
        }

        /// <summary>
        /// The name of the balancer as shown to the user.
        /// </summary>
        public override string Name
        {
            get 
            {
                return "BALANCER-NAME-HERE";
            }
        }

        /// <summary>
        /// A short description that will be shown to the user.
        /// </summary>
        public override string Description
        {
            get 
            {
                return "Enter a short description of your balancing plug-in.";
            }
        }

        /// <summary>
        /// Determine if any files need to be moved, and schedule one or more moves.
        /// 
        /// This is our balancing algorithm.
        /// </summary>
        public override void Balance(IEnumerable<DrivePool.Integration.Info.Balancing.BalanceStateInfo> balanceStates)
        {
            // Get our settings
            var settings = this.Setting as BalancerSettingsState;
            if (settings == null)
            {
                settings = BalancerSettingsState.Default;
            }

            // TODO: Write your balancing algorithm here.

        }

        /*

        /// <summary>
        /// Alter the defaults for this balancer.
        /// </summary>
        protected override DefaultSettings GetDefaultSettings()
        {
            return new DefaultSettings() { IsEnabled = true };
        }

        */
    }
}
